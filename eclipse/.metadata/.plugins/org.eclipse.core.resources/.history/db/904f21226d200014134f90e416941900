package de.castelbuilder123.spellcraft.listener;

import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import cpw.mods.fml.common.gameevent.PlayerEvent;
import de.castelbuilder123.spellcraft.block.BlockKeyReceptical;
import de.castelbuilder123.spellcraft.block.BlockKeyStone;
import de.castelbuilder123.spellcraft.data.PlayerData;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.ChatComponentText;
import net.minecraft.world.WorldServer;
import net.minecraftforge.event.entity.player.PlayerInteractEvent;
import net.minecraftforge.event.world.BlockEvent;
import net.minecraftforge.event.world.WorldEvent;

/**
 * Created by Jona on 05.08.14.
 */
public class PlayerJoinListener {
    @SubscribeEvent
    public void onPlayerLogin(PlayerEvent.PlayerLoggedInEvent event)
    {
        PlayerData.onJoin(event.player);
        event.player.addChatMessage(new ChatComponentText(de.castelbuilder123.spellcraft.utils.template.TemplateCreator.Generate(event.player.worldObj, 10, 120, 9, 10, 150, 9)));
    }
    @SubscribeEvent
    public void onPlayerLogout(PlayerEvent.PlayerLoggedOutEvent event)
    {
        PlayerData.onLogout(event.player);
    }

    @SubscribeEvent
    public void onWorldUnload(WorldEvent.Unload event)
    {
        //SpellCraftMod.log.info("UNLOADING WORLD!!!");
        if (event.world.provider.dimensionId == 0) // Because the OverWorld doesn't unload until server stop, because the spawn area is always loaded
        {
            for (WorldServer world: MinecraftServer.getServer().worldServers)
            {
                for (Object playerObj: world.playerEntities)
                {
                    if (playerObj instanceof EntityPlayer)
                    {
                        PlayerData.onLogout((EntityPlayer)playerObj);
                    }
                }
            }
        }
    }

    @SubscribeEvent
    public void onBlockBreak(BlockEvent.BreakEvent event)
    {
        if (event.getPlayer().capabilities.isCreativeMode)
            return;
        if (event.world.provider.dimensionId == -2) // No block breaking in Dim -2
        {
            if (event.isCancelable())
                event.setCanceled(true);
        }
    }

    @SubscribeEvent
    public void onBlockPlace(PlayerInteractEvent event)
    {
        if (event.entityPlayer.capabilities.isCreativeMode)
            return;
        if (event.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) //TODO: Allow the portal to be used
        {
            if (!(event.entityPlayer.worldObj.getBlock(event.x, event.y, event.z) instanceof BlockKeyStone) && !( event.entityPlayer.worldObj.getBlock(event.x, event.y, event.z) instanceof BlockKeyReceptical )
            {
                if (event.isCancelable())
                    event.setCanceled(true);
            }
        }
    }
}
