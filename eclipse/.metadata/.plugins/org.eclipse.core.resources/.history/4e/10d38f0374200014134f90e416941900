package de.castelbuilder123.spellcraft.utils.template;

import java.io.FileInputStream;
import java.io.IOException;

import net.minecraft.block.Block;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.world.World;
import net.minecraft.world.chunk.Chunk;
import de.castelbuilder123.libNBT.NBTInputStream;
import de.castelbuilder123.libNBT.tags.Tag;
import de.castelbuilder123.spellcraft.SpellCraftMod;

public class TemplateCreator {
    public static String Generate(World world, int sx, int sy, int sz, int ex, int ey, int ez) {
        return Generate(world, sx, sy, sz, ex, ey, ez, true, true, false);
    }

    public static String Generate(World world, int sx, int sy, int sz, int ex, int ey, int ez, boolean nbt, boolean meta, boolean useIds) {
        String json = "{";
        json += genHeaders(world, sx, sy, sz, ex, ey, ez, nbt, meta, useIds)+",";
        json += genTpl(world, sx, sy, sz, ex, ey, ez, nbt, meta, useIds);
        json += "}";
        return json;
    }

    private static String genHeaders(World world, int sx, int sy, int sz, int ex, int ey, int ez, boolean nbt, boolean meta, boolean useIds)
    {
        return "\"headers\": {" +
               "\"worldName\": \""+ world.getProviderName() + "\""+","+
               "\"worldID\": "+world.provider.dimensionId+","+
               "\"nbt\": "+"\""+(nbt?"true":"false")+"\""+","+
               "\"meta\": "+"\""+(meta?"true":"false")+"\""+","+
               "\"useIds\": "+"\""+(useIds?"true":"false")+"\""+","+
               "\"mx\": "+(sx-ex)+","+
               "\"my\": "+(sy-ey)+","+
               "\"mz\": "+(sz-ez)+","+
               "}";
    }

    private static String genTpl(World world, int sx, int sy, int sz, int ex, int ey, int ez, boolean nbt, boolean meta, boolean useIds)
    {
        String json = "\"template\": {\"blocks\": [";
        boolean Xbackward = (sx < ex);
        boolean Ybackward = (sy < ey);
        boolean Zbackward = (sz < ez);
        //SpellCraftMod.log.info(Xbackward + " | " + Ybackward + " | " + Zbackward);
        int x = Xbackward?sx:ex;
        int y = Ybackward?sy:ey;
        int z = Zbackward?sz:ez;
        //SpellCraftMod.log.info(x + " f|f " + y + " f|f " +z);
        while ((Xbackward?(x <= ex):(x <= sx)))
        {
            //SpellCraftMod.log.info(x + " x|x " + y + " x|x " +z);
            while ((Ybackward?(y <= ey):(y <= sy)))
            {
                //SpellCraftMod.log.info(x + " y|y " + y + " y|y " +z);
                while ((Zbackward?(z <= ez):(z <= sz)))
                {
                    //SpellCraftMod.log.info(x + " z|z " + y + " z|z " +z);
                    json += genJsonFromBlock(world, world.getBlock(x,y,z), x,y,z,nbt,meta,useIds) + ((((Xbackward?(x == ex):(x == sx)) && (Ybackward?(y == ey):(y == sy)) && (Zbackward?(z == ez):(z == sz))))?(""):(","));
                    z++;
                }
                z = 1;
                y++;
            }
            y = 1;
            x++;
        }
        json += "]}";
        return json;
    }

    private static String genJsonFromBlock(World world, Block block, int offX, int offY, int offZ, boolean nbt, boolean meta, boolean useIds)
    {
        String json = "{";
        json += "\"blockid\": " + (useIds?Block.getIdFromBlock(block):"\""+block.getUnlocalizedName()+"\"") + ",";
        if (meta)
            json += "\"meta\": " + (world.getTileEntity(offX, offY, offZ) == null?"0":getBlockMeta(world, offX, offY, offZ));
        if (nbt)
        {
            TileEntity tileEntity;
            if ((tileEntity = world.getTileEntity(offX, offY, offZ)) != null)
            {
                // Well... no easy Way to get NBT. Then lets go the Hardcore Way
                Chunk chunk = world.getChunkFromBlockCoords(offX, offZ);
                int regionX = (int)Math.floor(chunk.xPosition / 32.0);
                int regionZ = (int)Math.floor(chunk.zPosition / 32.0);
                /*
                Region Format:
                r.regionX.regionZ.mca:
                    COMPOUND: Chunk[chunkX, chunkZ]
                        COMPOUND: Level
                            BOOLEAN: LightPopulated
                            BOOLEAN: TerrainPopulated
                            BOOLEAN: V
                            INT: xPos
                            INT: zPos
                            LONG: InhabitedTime
                            LONG: LastUpdate
                            BYTE[256]: Biomes
                            LIST: Entities
                            LIST: Sections
                                ---SNIP---
                            LIST: TileEntities
                                COMPOUND <--- WANNA GET IT!!!
                                    INT: x
                                    INT: y
                                    INT; z
                                    STRING: id
                                    ---OTHER STUFF!!!---
               */
                
                try {
                    NBTInputStream nbtInputStream = new NBTInputStream(new FileInputStream(System.getProperty("user.dir") + "//" + world.getSaveHandler().getWorldDirectory().toString().substring(2) + "//DIM" + String.valueOf(world.provider.dimensionId)+ "//region//r." + regionX + "." + regionZ + ".mca"), true);
                    //There we go! // But remember restart your WorldServer
                    final Tag root = nbtInputStream.readRootTag();
                    SpellCraftMod.log.info(root.toString());
                    nbtInputStream.close();
                } catch (final ClassCastException ex) {
                    SpellCraftMod.log.error("Invalid level tag format.");
                } catch (final NullPointerException ex) {
                    SpellCraftMod.log.error("Invalid level format.");
                } catch (IOException e) {
                    SpellCraftMod.log.error("Could not create NBT STREAM");
                    SpellCraftMod.log.error(e.toString());
                }
            }
        }
        json += "}";
        return json;
    }

    private static String getBlockMeta(World world, int x, int y, int z)
    {
        TileEntity tileEntity = world.getTileEntity(x,y,z);
        return String.valueOf(tileEntity.getBlockMetadata());
    }
}
