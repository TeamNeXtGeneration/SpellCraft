package de.castelbuilder123.libNBT;

import de.castelbuilder123.libNBT.tags.*;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.GZIPInputStream;

/**
 * Created by Jona on 09.08.14.
 */
public class NBTInputStream {
    DataInputStream is;

    public NBTInputStream(InputStream inputStream, boolean tryGZIP)
    {
        if (tryGZIP)
        {
            try {
                is = new DataInputStream(new GZIPInputStream(inputStream));
                return;
            }
            catch (Exception e) {}
        }
        is = new DataInputStream(inputStream);
    }

    public CompoundTag readRootTag() throws IOException
    {
        CompoundTag tag = null;
        if (is.readByte() == 10)
        {
            tag = readCompoundTag(false, true);
        }
        else
            throw new IOException("File doesn't start with a TAG_COMPOUND");
        return tag;
    }

    public CompoundTag readCompoundTag(boolean named, boolean root) throws IOException
    {
        byte type = 10;
        if (!root)
            type = is.readByte();
        if (type == 10)
        {
        	String title = "";
        	if (named)
        		title = readStringTag(false, false).getValue();
            Map<String, Tag> tagMap = new HashMap<String, Tag>();
            while (true)
            {
                byte tmpType = is.readByte(); // Get Type
                // We cant do a switch here, because of the break we are in a while true loop
                if (tmpType == 0)
                    break;
                else if (tmpType == 1)
                {
                    ByteTag tag = readByteTag(true, true);
                    String name = tag.getName();
                    tagMap.put(name, tag);
                }
                else if (tmpType == 2)
                {
                    ShortTag tag = readShortTag(true, true);
                    String name = tag.getName();
                    tagMap.put(name, tag);
                }
                else if (tmpType == 3)
                {
                    IntTag tag = readIntegerTag(true, true); // i will add those read methodes later
                    String name = tag.getName();
                    tagMap.put(name, tag);
                }
                else if (tmpType == 4)
                {
                    LongTag tag = readLongTag(true, true);
                    String name = tag.getName();
                    tagMap.put(name, tag);
                }
                else if (tmpType == 5)
                {
                    FloatTag tag = readFloatTag(true, true);
                    String name = tag.getName();
                    tagMap.put(name, tag);
                }
                else if (tmpType == 6)
                {
                    DoubleTag tag = readDoubleTag(true, true);
                    String name = tag.getName();
                    tagMap.put(name, tag);
                }
                else if (tmpType == 7)
                {
                    ByteTag tag = readByteTag(true, true);
                    String name = tag.getName();
                    tagMap.put(name, tag);
                }
                else if (tmpType == 8)
                {
                    ByteTag tag = readByteTag(true, true);
                    String name = tag.getName();
                    tagMap.put(name, tag);
                }
                else if (tmpType == 9)
                {
                    ByteTag tag = readByteTag(true, true);
                    String name = tag.getName();
                    tagMap.put(name, tag);
                }
                else if (tmpType == 10)
                {
                    ByteTag tag = readByteTag(true, true);
                    String name = tag.getName();
                    tagMap.put(name, tag);
                }
            }
        }
    }

    public ByteTag readByteTag(boolean named, boolean typeDetected) throws IOException
    {
        byte type = 1;
        if (!typeDetected)
            type = is.readByte();
        if (type == 1)
        {
            String name = "";
            if (named)
                name = readStringTag(false, false).getValue();
            byte value = is.readByte();
            return new ByteTag(name, value);
        }
        else
            throw new IOException("Byte Tag should be read, but it was no TAG_BYTE");
    }


    public StringTag readStringTag(boolean named, boolean typeDetected) throws IOException
    {
        byte type = 8;
        if (!typeDetected)
            type = is.readByte();
        if (type == 8)
        {
            String name = "";
            if (named)
                name = readStringTag(false, false).getValue();
            Short lenght = readShortTag(false, false).getValue();
            byte[] bValue = new byte[lenght];
            for (int i = 1; i < lenght; i++)
            {
                bValue[i-1] = is.readByte();
            }
            String value = new String(bValue, StandardCharsets.UTF_8);
            return new StringTag(name, value);
        }
        else
            throw new IOException("String Tag should be read, but it was no TAG_STRING");
    }

    public ShortTag readShortTag(boolean named, boolean typeDetected) throws IOException
    {
        byte type = 2;
        if (!typeDetected)
            type = is.readByte();
        if (type == 2)
        {
            String name = "";
            if (named)
                name = readStringTag(false, false).getValue();
            Short value = is.readShort();
            return new ShortTag(name, value);
        }
        else
            throw new IOException("Short Tag should be read, but it was no TAG_SHORT");
    }
}
